package flat/compiler

import flat/io/File
import flat/ast/Node
import flat/compiler/models/Token
import flat/lexer/Lexer
import flat/parser/Parser
import flat/log/Logger
import flat/time/Timer

class {
  let static Logger log = Logger(Compiler.class)

  public static async main(String[] args) {
    let lexTimer = Timer()
    let parseTimer = Timer()
    let completeTimer = Timer():start()

    let sourceFile = File(args[1])
    let nodes = Node[]

    lexTimer.start()
    let tokenStream = Lexer().lex(sourceFile)
    tokenStream.on<Token>("data", token => Compiler.log.debugFunc({"Token: '#{token.value}'"}))
    tokenStream.on("close", { lexTimer.stop() })
    tokenStream.waitFor("close")

    parseTimer.start()
    let nodeStream = Parser().parse(sourceFile, tokenStream)
    nodeStream.on("data", node => Compiler.log.debugFunc({"Node: #{node}"}))
    nodeStream.on("data", { nodes.add(_) })
    nodeStream.on("close", { parseTimer.stop() })
    nodeStream.waitFor("close")

    completeTimer.stop()

    Compiler.log.info("Done! Took #{completeTimer.duration}ms (lexing #{lexTimer.duration}ms, parsing #{parseTimer.duration}ms)")

    Compiler.log.info(nodes.first.toJson())
  }
}
